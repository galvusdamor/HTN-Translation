(define (domain blocks)
  (:requirements :strips :disjunctive-preconditions)
  (:types BLOCK)
  (:predicates
    (clear ?b - BLOCK)
    (holding ?b - BLOCK)
    (on ?top - BLOCK ?bottom - BLOCK)
    (on-table ?b - BLOCK)
    
    (move-me ?b - BLOCK)
    (move-table ?b - BLOCK)
    (goal-on ?t - BLOCK ?b - BLOCK)
    (goal-on-table ?b - BLOCK)
    (goal-clear ?b - BLOCK)
    (next-on ?t - BLOCK ?b - BLOCK)
    (next-table ?t - BLOCK)
    (repeat)
    )

  (:action pickup
    :task (acquire ?b)
    :parameters (?b - BLOCK)
    :precondition (and (clear ?b) (on-table ?b))
    :effect (and
      (not (clear ?b)) 
      (not (on-table ?b))
      (not (move-me ?b))
      (not (move-table ?b))
      (holding ?b)))

  (:action putdown
    :task (putdown)
    :parameters (?b - BLOCK)
    :precondition (holding ?b)
    :effect (and
      (not (holding ?b))
      (not (next-table ?b))
      (on-table ?b) (clear ?b)))

  (:action stack
    :task (stack ?bottom)
    :parameters (?top - BLOCK ?bottom - BLOCK)
    :precondition (and
      (holding ?top)
      (clear ?bottom))
    :effect (and
      (not (holding ?top))
      (not (clear ?bottom))
      (not (next-on ?top ?bottom))
      (on ?top ?bottom)
      (clear ?top)))

  (:action unstack
    :task (acquire ?top)
    :parameters (?top - BLOCK ?bottom - BLOCK)
    :precondition (and
      (clear ?top)
      (on ?top ?bottom))
    :effect (and
      (not (clear ?top))
      (not (on ?top ?bottom))
      (not (move-me ?top))
      (not (move-table ?top))
      (holding ?top)
      (clear ?bottom)))
  
  (:action mark-move
    :task (mark-move ?b)
    :parameters (?b - BLOCK ?g - BLOCK)
    :precondition (goal-on ?b ?g)
    :effect (move-me ?b))

  (:action mark-aside
    :task (mark-move ?b)
    :parameters (?b - BLOCK)
    :precondition (forall (?g - BLOCK)
       (not (goal-on ?b ?g)))
    :effect (and (move-table ?b) (move-me ?b)))

 
  ;(:action mark-goal-on-table
  ;  :task (mark-goal-on-table ?b)
  ;  :parameters (?b - BLOCK)
  ;  :effect (goal-on-table ?b))
  (:action mark-move-goals
    :task (mark-move-goals)
    :effect (and
     (forall (?b - BLOCK) 
       (when (and (goal-on ?b ?g) (not (on ?b ?g))) (move-me ?b)))
     (forall (?b - BLOCK) 
       (when (and (goal-on-table ?b) (not (on-table ?b))) 
         (and (move-me ?b) (move-table ?b))))))

  (:action mark-move-aside
    :task (mark-move-aside)
    :effect (forall (?b - BLOCK ?x - BLOCK) (when
      (and (not (move-me ?b) (on ?b ?x))
        (or
          (move-me ?x)
          (exists (?t - BLOCK) (goal-on ?t ?x))))
      (and (move-me ?b) (move-aside ?b) (repeat)))))

  (:action set-repeat
    :task (set-repeat)
    :effect (repeat))

  (:action remove-repeat
    :task (remove-repeat)
    :effect (not (repeat)))

  (:method find-all-moves
    :task (find-all-moves)
    :branches ((:branch work
      :tasks ((mark-move-goals) (set-repeat) (find-all-blocking)))))

  (:method find-all-blocking
     :task (find-all-blocking)
     :branches (
       (:branch work
         :precondition (repeat)
         :tasks ((remove-repeat) (mark-move-aside)))
       (:branch done)))

  (:method mark-stack
    :task (mark-stack ?b)
    :parameters (?b - block)
    :branches (
     (:branch work
       :parameters (?t - block)
       :precondition (on ?t ?b)
       :tasks ((mark-move ?b) (mark-stack ?t)))))

  (:method mark-stack-clear
    :task (mark-stack ?b)
    :parameters (?b - block)
    :branches (
     (:branch work
       :precondition (clear ?b)
       :tasks ((mark-move ?b)))))
  
  (:method mark-goal
  (:method find-move-on
      :task (find-move-on)
      :branches (
        (:branch work
          :parameters (?x - BLOCK ?y - BLOCK)
          :precondition (and (goal-on ?x ?y) (not (on ?x ?y)) (not (move-me ?x)))
          :tasks ((mark-stack ?x) (find-move-on-helper ?y) (find-move-on)))
        (:branch next
          :tasks ((find-move-table)))))

  (:method find-move-on-helper1
      :task (find-move-on-helper ?x)
      :parameters (?x - BLOCK)
      :branches (
        (:branch work
          :parameters (?y - BLOCK)
          :precondition (on ?y ?x)
          :tasks ((mark-stack ?y)))))

  (:method find-move-on-helper2
      :task (find-move-on-helper ?x)
      :parameters (?x - BLOCK)
      :branches (
        (:branch work
          :precondition (clear ?x)
          :tasks ())))


  (:method find-move-table
      :task (find-move-table)
      :branches (
        (:branch work
          :parameters (?x - BLOCK ?y - BLOCK)
          :precondition (and (goal-on-table ?x) (not (on-table ?x)) (not (move-me ?x)))
          :tasks ((mark-stack ?x) (find-move-table)))
        (:branch next
          :tasks ((find-move-clear)))))

  (:method find-move-clear
      :task (find-move-clear)
      :branches (
        (:branch work
          :parameters (?x - BLOCK ?y - BLOCK)
          :precondition (and (goal-clear ?x) (not (clear ?x)) (not (move-me ?x)))
          :tasks ((mark-stack ?x) (find-move-clear)))
        (:branch next
          :tasks ())))

  (:method move-loop
    :task (move-loop)
    :branches (
      (:branch work
        :parameters (?b - BLOCK)
        :tasks ((mark-next-table) (move-loop1)))))

  (:action mark-next-table
    :task (mark-next-table)
    :effect (forall (?b - BLOCK) (when
      (and (clear ?b) (move-table ?b))
      (next-table ?b))))

  (:method move-loop1
    :task (move-loop1)
    :branches (
     (:branch table
       :parameters (?b - BLOCK)
       :precondition (next-table ?b)
       :tasks ((acquire ?b) (putdown) (move-loop)))
     (:branch next
       :tasks ((mark-next-on) (move-loop2)))))

  (:action mark-next-on
    :task (mark-next-on)
    :effect (forall (?t - BLOCK ?b - BLOCK)
      (when (and 
        (clear ?t) (goal-on ?t ?b) (clear ?b) (not (move-me ?b)))
        (next-on ?t ?b))))

  (:method move-loop2
    :task (move-loop2)
    :branches (
      (:branch stack
        :parameters (?t - BLOCK ?b - BLOCK)
        :precondition (next-on ?t ?b)
        ;(and (clear ?t) (goal-on ?t ?b) 
        ;                   (clear ?b) (not (move-me ?b)))
        :tasks ((acquire ?t) (stack ?b) (move-loop)))
      (:branch next
        :tasks ((move-loop3)))))

  (:method move-loop3
    :task (move-loop3)
    :branches (
      (:branch aside
        :parameters (?x - BLOCK ?z - BLOCK)
        :precondition (and (clear ?x) (on ?x ?z) (move-me ?z))
        :tasks ((acquire ?x) (putdown) (mark-move ?x) (move-loop)))))
  (:method move-done
    :task (move-loop3)
    :branches (
      (:branch done 
        :precondition (forall (?x - BLOCK) (not (move-me ?x))))))


  (:method achieve-goals
    :task (achieve-goals)
    :branches (
      (:branch w
        :tasks (
         (find-move-on) 
         (move-loop)
         )))))

