(define (domain basic)
(:requirements :disjunctive-preconditions :negative-preconditions :strips)
(:types OBJ)
(:predicates
  (have ?o - OBJ)
  (handempty)
)

(:method swap
 :parameters (?x - OBJ ?y - OBJ)
 :task (swap ?x ?y)
 :precondition ()
 :branches (
  (:branch forward
   :precondition (have ?x)
   :tasks ((drop ?x) (pickup ?y)))
  (:branch backward
   :tasks ((drop ?y) (pickup ?x))))
)

(:method donothing
 :parameters (?o - OBJ)
 :task (donothing)
 :precondition ()
 :branches ())

(:method swapswap
 :parameters (?x - OBJ ?y - OBJ)
 :task (swap ?x ?y)
 :precondition ()
 :branches (
  (:branch one
   :parameters (?z - OBJ)
   :precondition ()
   :tasks ((swap ?x ?z)  (swap ?z ?y)))))

(:action pickup
 :parameters (?x - OBJ)
 :precondition (handempty)
 :effect (have ?x)
)

(:action drop
 :parameters (?x - OBJ)
 :precondition (have ?x)
 :effect (and (handempty) (not (have ?x)))
)


)
